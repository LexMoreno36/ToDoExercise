<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <link href="~/Content/cssStyles.css" rel="stylesheet" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>


    <div class="container body-content">
        @RenderBody()
    </div>

    <footer>

        <script>
            Vue.component('modalComponent', {
                data() {
                    return {
                        modalTitleData: this.pTitle,
                        modalDescriptionData: this.pDescription,
                        modalNameData: this.pName,
                        modalId: this.pId
                    }
                },
                props: ["p-title", "p-description", "p-name", "p-id"],
                template: "#modalTemplate",
                methods: {
                    //deleteCard() {
                    //    this.$emit('delete', this.pId);
                    //},
                    changed() {
                        this.$emit('update', this.pTitleData, this.pDescriptionData, this.pNameData, this.id)
                    },
                    saveTask() {
                        this.$emit('persist', this.modalTitleData, this.modalDescriptionData, this.modalNameData, this.modalId)
                        //console.log(this.$emit('persist', this.modalTitleData, this.modalDescriptionData, this.modalNameData, this.modalId))
                    }
                },
            })


            Vue.component('liTask', {
                data() {
                    return {
                        pTitleData: this.pTitle,
                        pDescriptionData: this.pDescription,
                        pNameData: this.pName,
                        id: this.pId
                    }
                },
                props: ["p-title", "p-description", "p-name", "p-id"],
                template: "#liTaskCardTemplate",
                methods: {
                    persistTask(title, description, name, id) {
                        this.$emit('persist-task-in-parent', title, description, name, id)
                    }
                },
            })



            var vm = new Vue({
                el: "#app",
                data() {
                    return {
                        forms: [],
                        counter: 0
                    }
                },
                methods: {

                    createCard() {
                        this.forms.push(this.createEmptyCardObject())
                        this.saveLocal();
                    },
                    parentDelete(id) {
                        this.forms.splice(this.getIndexFromId(id), 1)
                        this.saveLocal();
                    },
                    parentUpdate(title, description, name, id) {
                        this.forms.splice(this.getIndexFromId(id), 1, this.editFormById(title, description, name, id))
                        this.saveLocal();
                    },
                    persistTaskParent(title, description, name, id) {
                        this.forms.splice(this.getIndexFromId(id), 1, this.editFormById(title, description, name, id))
                        this.saveLocal();

                    },


                    saveLocal() {
                        window.localStorage.setItem('forms', JSON.stringify(this.forms))
                        window.localStorage.setItem('counter', this.counter)
                    },
                    getLocal() {
                        return JSON.parse(window.localStorage.getItem('forms'))
                    },
                    getIndexFromId(identificator) {
                        return this.forms.indexOf(this.forms.find(e => e.id == identificator))
                    },
                    createEmptyCardObject() {
                        return { title: "", description: "", name: "", id: `${this.counter++}`, date: `${this.getLocalDate()}` }
                    },
                    editFormById(title, description, name, id) {
                        var res = this.forms.find(e => e.id == id)
                        res.title = title
                        res.description = description
                        res.name = name
                        return res
                    },
                    getLocalDate() {
                        var date = new Date()
                        return date
                    },
                    lastModified(date) {
                        //var date = new Date()


                    },
                    loadLocalData() {
                        if (window.localStorage.getItem('forms')) {
                            this.forms = JSON.parse(window.localStorage.getItem('forms'))
                            this.counter = window.localStorage.getItem('counter')
                        }
                    }
                },
                mounted() {
                    this.loadLocalData();
                    //this.lastModified();
                }
            })
        </script>
    </footer>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

</body>

</html>
