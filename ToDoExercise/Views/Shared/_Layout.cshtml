<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <link href="~/Content/cssStyles.css" rel="stylesheet" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>

    <div class="container body-content" ">
        @RenderBody()
    </div>

    <footer>
        <script>

            Vue.component('taskCard', {
                data() {
                    return {
                        pTitleData: this.pTitle,
                        pNameData: this.pName,
                        pSurnamesData: this.pSurnames,
                        pDescriptionData: this.pDescription,
                        pIndexData: this.pIndex
                    }
                },
                props: ["p-title", "p-name", "p-surnames", "p-description", "p-index"],
                template: "#taskCardTemplate",
                methods: {
                    deleteCard() {
                        this.$emit('delete', this.pIndex);
                    },
                    changed() {
                        this.$emit('update', this.pTitleData, this.pNameData, this.pSurnamesData, this.pDescriptionData, this.pIndexData)
                    }

                },

            })

            var vm = new Vue({
                el: "#app",
                data() {
                    return {
                        forms: [],
                    }
                },
                methods: {
                    createCard() {
                        var emptyCardObject = { title: "", name: "", surnames: "", description: "" }
                        this.forms.push(emptyCardObject)
                    },
                    parentDelete(i) {
                        var temporalForms = JSON.parse(window.localStorage.getItem('forms'))
                        temporalForms.splice(i, 1)
                        window.localStorage.setItem('forms', JSON.stringify(temporalForms))
                        this.forms = JSON.parse(window.localStorage.getItem('forms'))
                    },
                    parentUpdate(t, n, s, d, i) {
                        this.forms[i].title = t
                        this.forms[i].name = n
                        this.forms[i].surnames = s
                        this.forms[i].description = d
                        window.localStorage.setItem('forms',  JSON.stringify(this.forms))
                    }
                },
                mounted() {
                    if (window.localStorage.getItem('forms')) {
                        this.forms = JSON.parse(window.localStorage.getItem('forms'))
                    }
                }
            })

                                            //vm.$watch('forms', (lastestValue, beforeValue) => {
                                            //    window.localStorage.setItem('forms', JSON.stringify(lastestValue));
                                            //}, { deep: true })
        </script>
    </footer>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

</body>

</html>
